// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bholdus_tokens
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-15, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("phoenix-dev"), DB CACHE: 128

// Executed Command:

// ./target/debug/bholdus

// benchmark

// --chain=phoenix-dev

// --execution=wasm

// --wasm-execution=compiled

// --pallet=bholdus_tokens

// --extrinsic=*

// --steps=20

// --repeat=10

// --output=./pallets/tokens/src/weights.rs

// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bholdus_tokens.
pub trait WeightInfo {
	
	fn create() -> Weight;
	
	fn create_and_mint(n: u32, s: u32, ) -> Weight;
	
	fn force_create() -> Weight;
	
	fn destroy(c: u32, s: u32, ) -> Weight;
	
	fn mint() -> Weight;
	
	fn burn() -> Weight;
	
	fn transfer() -> Weight;
	
	fn freeze() -> Weight;
	
	fn thaw() -> Weight;
	
	fn freeze_asset() -> Weight;
	
	fn thaw_asset() -> Weight;
	
	fn set_metadata(n: u32, s: u32, ) -> Weight;
	
	fn clear_metadata() -> Weight;
	
	fn set_identity(x: u32, ) -> Weight;
	
	fn set_blacklist(n: u32, s: u32, ) -> Weight;
	
	fn verify_asset() -> Weight;
	
}

/// Weights for bholdus_tokens using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {

	
	
	// Storage: Tokens NextAssetId (r:1 w:1)
	
	// Storage: Tokens Asset (r:0 w:1)
	
	fn create() -> Weight {
		(1_307_660_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: Tokens AssetsBlacklist (r:1 w:0)
	
	// Storage: Tokens NextAssetId (r:1 w:1)
	
	// Storage: Tokens Account (r:1 w:1)
	
	// Storage: Tokens Metadata (r:0 w:1)
	
	// Storage: Tokens Asset (r:0 w:1)
	
	fn create_and_mint(n: u32, s: u32, ) -> Weight {
		(3_587_459_000 as Weight)
			
			// Standard Error: 570_000
			.saturating_add((168_000 as Weight).saturating_mul(n as Weight))
			
			// Standard Error: 570_000
			.saturating_add((1_370_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	fn force_create() -> Weight {
		(1_304_190_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:2 w:1)
	
	// Storage: Tokens Metadata (r:1 w:1)
	
	// Storage: Tokens IdentityOf (r:1 w:0)
	
	// Storage: Tokens Approvals (r:1 w:0)
	
	// Storage: System Account (r:1 w:1)
	
	fn destroy(c: u32, _s: u32, ) -> Weight {
		(4_286_419_000 as Weight)
			
			// Standard Error: 19_816_000
			.saturating_add((865_653_000 as Weight).saturating_mul(c as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			
			
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			
			
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(c as Weight)))
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn mint() -> Weight {
		(1_925_560_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn burn() -> Weight {
		(2_420_128_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:2 w:2)
	
	// Storage: System Account (r:1 w:1)
	
	fn transfer() -> Weight {
		(4_779_153_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn freeze() -> Weight {
		(1_688_827_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn thaw() -> Weight {
		(1_743_537_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	fn freeze_asset() -> Weight {
		(1_204_939_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	fn thaw_asset() -> Weight {
		(1_209_969_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens AssetsBlacklist (r:1 w:0)
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Metadata (r:1 w:1)
	
	fn set_metadata(_n: u32, _s: u32, ) -> Weight {
		(2_176_719_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Metadata (r:1 w:1)
	
	fn clear_metadata() -> Weight {
		(2_583_030_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens IdentityOf (r:1 w:1)
	
	fn set_identity(x: u32, ) -> Weight {
		(1_718_757_000 as Weight)
			
			// Standard Error: 142_000
			.saturating_add((42_807_000 as Weight).saturating_mul(x as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens AssetsBlacklist (r:1 w:1)
	
	fn set_blacklist(n: u32, s: u32, ) -> Weight {
		(1_149_446_000 as Weight)
			
			// Standard Error: 132_000
			.saturating_add((538_000 as Weight).saturating_mul(n as Weight))
			
			// Standard Error: 132_000
			.saturating_add((302_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens IdentityOf (r:1 w:1)
	
	fn verify_asset() -> Weight {
		(1_596_854_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
}

// For backwards compatibility and tests
impl WeightInfo for () {
	
	
	// Storage: Tokens NextAssetId (r:1 w:1)
	
	// Storage: Tokens Asset (r:0 w:1)
	
	fn create() -> Weight {
		(1_307_660_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: Tokens AssetsBlacklist (r:1 w:0)
	
	// Storage: Tokens NextAssetId (r:1 w:1)
	
	// Storage: Tokens Account (r:1 w:1)
	
	// Storage: Tokens Metadata (r:0 w:1)
	
	// Storage: Tokens Asset (r:0 w:1)
	
	fn create_and_mint(n: u32, s: u32, ) -> Weight {
		(3_587_459_000 as Weight)
			
			// Standard Error: 570_000
			.saturating_add((168_000 as Weight).saturating_mul(n as Weight))
			
			// Standard Error: 570_000
			.saturating_add((1_370_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	fn force_create() -> Weight {
		(1_304_190_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:2 w:1)
	
	// Storage: Tokens Metadata (r:1 w:1)
	
	// Storage: Tokens IdentityOf (r:1 w:0)
	
	// Storage: Tokens Approvals (r:1 w:0)
	
	// Storage: System Account (r:1 w:1)
	
	fn destroy(c: u32, _s: u32, ) -> Weight {
		(4_286_419_000 as Weight)
			
			// Standard Error: 19_816_000
			.saturating_add((865_653_000 as Weight).saturating_mul(c as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			
			
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			
			
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(c as Weight)))
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn mint() -> Weight {
		(1_925_560_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn burn() -> Weight {
		(2_420_128_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	// Storage: Tokens Account (r:2 w:2)
	
	// Storage: System Account (r:1 w:1)
	
	fn transfer() -> Weight {
		(4_779_153_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn freeze() -> Weight {
		(1_688_827_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Account (r:1 w:1)
	
	fn thaw() -> Weight {
		(1_743_537_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	fn freeze_asset() -> Weight {
		(1_204_939_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:1)
	
	fn thaw_asset() -> Weight {
		(1_209_969_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens AssetsBlacklist (r:1 w:0)
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Metadata (r:1 w:1)
	
	fn set_metadata(_n: u32, _s: u32, ) -> Weight {
		(2_176_719_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens Metadata (r:1 w:1)
	
	fn clear_metadata() -> Weight {
		(2_583_030_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens IdentityOf (r:1 w:1)
	
	fn set_identity(x: u32, ) -> Weight {
		(1_718_757_000 as Weight)
			
			// Standard Error: 142_000
			.saturating_add((42_807_000 as Weight).saturating_mul(x as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens AssetsBlacklist (r:1 w:1)
	
	fn set_blacklist(n: u32, s: u32, ) -> Weight {
		(1_149_446_000 as Weight)
			
			// Standard Error: 132_000
			.saturating_add((538_000 as Weight).saturating_mul(n as Weight))
			
			// Standard Error: 132_000
			.saturating_add((302_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Tokens Asset (r:1 w:0)
	
	// Storage: Tokens IdentityOf (r:1 w:1)
	
	fn verify_asset() -> Weight {
		(1_596_854_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
}