// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bholdus_nft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-30, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("phoenix-dev"), DB CACHE: 128

// Executed Command:

// ./target/release/bholdus

// benchmark

// --chain=phoenix-dev

// --execution=wasm

// --wasm-execution=compiled

// --pallet=bholdus-nft

// --extrinsic=*

// --steps=20

// --repeat=10

// --output=./pallets/non-fungible-token/src/weights.rs

// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bholdus_nft.
pub trait WeightInfo {
	
	fn create_class() -> Weight;
	
	fn mint(i: u32, ) -> Weight;
	
	fn transfer() -> Weight;
	
	fn burn() -> Weight;
	
	fn destroy_class() -> Weight;
	
}

/// Weights for bholdus_nft using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {

	
	
	// Storage: BholdusSupportNFT NextClassId (r:1 w:1)
	
	// Storage: BholdusSupportNFT Classes (r:0 w:1)
	
	fn create_class() -> Weight {
		(29_051_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextGroupId (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextTokenId (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextTokenIdByClass (r:1 w:1)
	
	// Storage: BholdusSupportNFT TokensByGroup (r:0 w:1)
	
	// Storage: BholdusSupportNFT Tokens (r:0 w:1)
	
	// Storage: BholdusSupportNFT TokensByOwner (r:0 w:1)
	
	fn mint(i: u32, ) -> Weight {
		(8_485_000 as Weight)
			
			// Standard Error: 274_000
			.saturating_add((39_371_000 as Weight).saturating_mul(i as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			
			
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(i as Weight)))
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:0)
	
	// Storage: BholdusSupportNFT Tokens (r:1 w:1)
	
	// Storage: BholdusSupportNFT TokensByOwner (r:0 w:2)
	
	fn transfer() -> Weight {
		(85_283_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:1)
	
	// Storage: BholdusSupportNFT Tokens (r:1 w:1)
	
	// Storage: BholdusSupportNFT TokensByOwner (r:0 w:1)
	
	fn burn() -> Weight {
		(73_628_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextTokenIdByClass (r:0 w:1)
	
	fn destroy_class() -> Weight {
		(40_871_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
}

// For backwards compatibility and tests
impl WeightInfo for () {
	
	
	// Storage: BholdusSupportNFT NextClassId (r:1 w:1)
	
	// Storage: BholdusSupportNFT Classes (r:0 w:1)
	
	fn create_class() -> Weight {
		(29_051_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextGroupId (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextTokenId (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextTokenIdByClass (r:1 w:1)
	
	// Storage: BholdusSupportNFT TokensByGroup (r:0 w:1)
	
	// Storage: BholdusSupportNFT Tokens (r:0 w:1)
	
	// Storage: BholdusSupportNFT TokensByOwner (r:0 w:1)
	
	fn mint(i: u32, ) -> Weight {
		(8_485_000 as Weight)
			
			// Standard Error: 274_000
			.saturating_add((39_371_000 as Weight).saturating_mul(i as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			
			
			.saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(i as Weight)))
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:0)
	
	// Storage: BholdusSupportNFT Tokens (r:1 w:1)
	
	// Storage: BholdusSupportNFT TokensByOwner (r:0 w:2)
	
	fn transfer() -> Weight {
		(85_283_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:1)
	
	// Storage: BholdusSupportNFT Tokens (r:1 w:1)
	
	// Storage: BholdusSupportNFT TokensByOwner (r:0 w:1)
	
	fn burn() -> Weight {
		(73_628_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: BholdusSupportNFT Classes (r:1 w:1)
	
	// Storage: BholdusSupportNFT NextTokenIdByClass (r:0 w:1)
	
	fn destroy_class() -> Weight {
		(40_871_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
}