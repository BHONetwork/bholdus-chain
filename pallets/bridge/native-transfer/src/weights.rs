// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bholdus_bridge_native_transfer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-03, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cygnus-dev"), DB CACHE: 128

// Executed Command:

// ./target/release/bholdus

// benchmark

// --chain=cygnus-dev

// --execution=wasm

// --wasm-execution=compiled

// --pallet=bholdus_bridge_native_transfer

// --extrinsic=*

// --steps=20

// --repeat=10

// --output=./pallets/bridge/native-transfer/src/weights.rs

// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bholdus_bridge_native_transfer.
pub trait WeightInfo {
	
	fn initiate_transfer(s: u32, ) -> Weight;
	
	fn confirm_transfer(s: u32, ) -> Weight;
	
	fn release_tokens(s: u32, ) -> Weight;
	
	fn force_register_relayer(s: u32, ) -> Weight;
	
	fn force_unregister_relayer(s: u32, ) -> Weight;
	
	fn force_register_chain(s: u32, ) -> Weight;
	
	fn force_unregister_chain(s: u32, ) -> Weight;
	
	fn force_set_service_fee(s: u32, ) -> Weight;
	
	fn force_withdraw(s: u32, ) -> Weight;
	
	fn force_freeze() -> Weight;
	
	fn force_unfreeze() -> Weight;
	
}

/// Weights for bholdus_bridge_native_transfer using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {

	
	
	// Storage: BridgeNativeTransfer Frozen (r:1 w:0)
	
	// Storage: BridgeNativeTransfer RegisteredChains (r:1 w:0)
	
	// Storage: BridgeNativeTransfer ServiceFeeRate (r:1 w:0)
	
	// Storage: System Account (r:1 w:1)
	
	// Storage: BridgeNativeTransfer NextOutboundTransferId (r:1 w:1)
	
	// Storage: BridgeNativeTransfer OutboundTransfers (r:0 w:1)
	
	fn initiate_transfer(s: u32, ) -> Weight {
		(67_568_000 as Weight)
			
			// Standard Error: 5_000
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:1 w:0)
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:1 w:0)
	
	// Storage: BridgeNativeTransfer NextConfirmOutboundTransferId (r:1 w:1)
	
	// Storage: BridgeNativeTransfer NextOutboundTransferId (r:1 w:0)
	
	// Storage: BridgeNativeTransfer OutboundTransfers (r:1 w:0)
	
	// Storage: System Account (r:1 w:1)
	
	fn confirm_transfer(s: u32, ) -> Weight {
		(47_445_000 as Weight)
			
			// Standard Error: 2_000
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:1 w:0)
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:1 w:0)
	
	// Storage: BridgeNativeTransfer NextInboundTransferId (r:1 w:1)
	
	// Storage: System Account (r:1 w:1)
	
	fn release_tokens(_s: u32, ) -> Weight {
		(46_168_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:0 w:1)
	
	fn force_register_relayer(_s: u32, ) -> Weight {
		(3_124_000 as Weight)
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:0 w:1)
	
	fn force_unregister_relayer(s: u32, ) -> Weight {
		(2_529_000 as Weight)
			
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredChains (r:0 w:1)
	
	fn force_register_chain(_s: u32, ) -> Weight {
		(2_563_000 as Weight)
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredChains (r:0 w:1)
	
	fn force_unregister_chain(_s: u32, ) -> Weight {
		(2_498_000 as Weight)
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer ServiceFeeRate (r:0 w:1)
	
	fn force_set_service_fee(_s: u32, ) -> Weight {
		(2_095_000 as Weight)
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: System Account (r:1 w:0)
	
	fn force_withdraw(_s: u32, ) -> Weight {
		(5_066_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:0 w:1)
	
	fn force_freeze() -> Weight {
		(1_787_000 as Weight)
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:0 w:1)
	
	fn force_unfreeze() -> Weight {
		(1_732_000 as Weight)
			
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
}

// For backwards compatibility and tests
impl WeightInfo for () {
	
	
	// Storage: BridgeNativeTransfer Frozen (r:1 w:0)
	
	// Storage: BridgeNativeTransfer RegisteredChains (r:1 w:0)
	
	// Storage: BridgeNativeTransfer ServiceFeeRate (r:1 w:0)
	
	// Storage: System Account (r:1 w:1)
	
	// Storage: BridgeNativeTransfer NextOutboundTransferId (r:1 w:1)
	
	// Storage: BridgeNativeTransfer OutboundTransfers (r:0 w:1)
	
	fn initiate_transfer(s: u32, ) -> Weight {
		(67_568_000 as Weight)
			
			// Standard Error: 5_000
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:1 w:0)
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:1 w:0)
	
	// Storage: BridgeNativeTransfer NextConfirmOutboundTransferId (r:1 w:1)
	
	// Storage: BridgeNativeTransfer NextOutboundTransferId (r:1 w:0)
	
	// Storage: BridgeNativeTransfer OutboundTransfers (r:1 w:0)
	
	// Storage: System Account (r:1 w:1)
	
	fn confirm_transfer(s: u32, ) -> Weight {
		(47_445_000 as Weight)
			
			// Standard Error: 2_000
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:1 w:0)
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:1 w:0)
	
	// Storage: BridgeNativeTransfer NextInboundTransferId (r:1 w:1)
	
	// Storage: System Account (r:1 w:1)
	
	fn release_tokens(_s: u32, ) -> Weight {
		(46_168_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:0 w:1)
	
	fn force_register_relayer(_s: u32, ) -> Weight {
		(3_124_000 as Weight)
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredRelayers (r:0 w:1)
	
	fn force_unregister_relayer(s: u32, ) -> Weight {
		(2_529_000 as Weight)
			
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredChains (r:0 w:1)
	
	fn force_register_chain(_s: u32, ) -> Weight {
		(2_563_000 as Weight)
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer RegisteredChains (r:0 w:1)
	
	fn force_unregister_chain(_s: u32, ) -> Weight {
		(2_498_000 as Weight)
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer ServiceFeeRate (r:0 w:1)
	
	fn force_set_service_fee(_s: u32, ) -> Weight {
		(2_095_000 as Weight)
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: System Account (r:1 w:0)
	
	fn force_withdraw(_s: u32, ) -> Weight {
		(5_066_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:0 w:1)
	
	fn force_freeze() -> Weight {
		(1_787_000 as Weight)
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: BridgeNativeTransfer Frozen (r:0 w:1)
	
	fn force_unfreeze() -> Weight {
		(1_732_000 as Weight)
			
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
}